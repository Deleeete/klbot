<?xml version="1.0"?>
<doc>
    <assembly>
        <name>klbotlib</name>
    </assembly>
    <members>
        <member name="T:klbotlib.Info.CoreLibInfo">
            <summary>
            klbotlib的程序集信息
            </summary>
        </member>
        <member name="M:klbotlib.Info.CoreLibInfo.GetLibVersion">
            <summary>
            获取程序集版本
            </summary>
            <returns>程序集版本</returns>
        </member>
        <member name="T:klbotlib.Modules.ModuleStatusAttribute">
            <summary>
            模块状态Attribute，用来标记模块属性。
            模块状态用来标记那些决定模块状态的成员，比如某个功能是否开启。
            只有打上此标记之后，该成员的值才会被Module.ExportStatusDict()保存，且机器人启动或关闭时会自动读取或保存这些成员的值
            </summary>
        </member>
        <member name="F:klbotlib.Modules.ModuleStatusAttribute.IsHidden">
            <summary>
            决定该属性标记的字段是否隐藏。
            如果隐藏(true)，则使用KLBot的GetModuleStatusString() API列出各个模块状态时，不会包含这个字段的值。
            此字段默认为否(false)。
            </summary>
        </member>
        <member name="T:klbotlib.Modules.ModuleSetupAttribute">
            <summary>
            模块配置Attribute，用来标记模块配置。
            此Attribute用来标记那些决定模块配置的成员，比如特定文件的存取路径。
            只有打上此标记之后，该成员的值才能被Module.ExportSetupDict()保存
            </summary>
        </member>
        <member name="T:klbotlib.Modules.Module">
            <summary>
            消息处理模块基类.
            这是KLBot功能实现的基本单位
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.ModuleName">
            <summary>
            模块名. 是模块种类的唯一标识. 直接等于模块在源码中的类名。
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.ModuleID">
            <summary>
            模块ID. 是模块对象的唯一标识. 
            当模块未附加到KLBot上时，等于模块名；
            当模块附加到KLBot上时，等于“模块类名#在同类模块中的排位”
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.IsAttached">
            <summary>
            返回此模块是否已经被附加到宿主KLBot上
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.IsTransparent">
            <summary>
            决定此模块是否是透明模块(默认为否).
            透明模块处理消息之后会继续向后传递，以使得Bot内部在它之后的模块能继续处理这条消息.
            非透明模块处理消息之后会销毁消息.
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.UseSignature">
            <summary>
            决定是否在输出前自动加上模块签名"[模块ID]"（默认开启）。
            开启模块签名时，输出会被MsgMarker解析器默认当作文本消息（显然）
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.IsAsync">
            <summary>
            决定是否使用纯异步执行. 
            此项为true时, 处理器处理消息时不会阻塞, 但完成消息处理的顺序不能得到保证. 
            此项为false时, 处理器仅在处理完上一条消息后才会开始处理下一条消息.
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.FriendlyName">
            <summary>
            模块的友好名称（别名）。仅用于打印模块链条信息/触发帮助信息，默认和ModuleName字段相同，即模块类名。
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.HelpInfo">
            <summary>
            模块的帮助信息。KLBot在接收到“[模块友好名称]帮助”时，会回复此字符串中的内容。
            </summary>
        </member>
        <member name="M:klbotlib.Modules.Module.Filter(klbotlib.Message)">
            <summary>
            过滤器(Message -> bool)。模块通过这个函数判断是否要处理某一条消息。
            在模块总开关开启的情况下，如果传入一条消息时输出为空或null，这条消息会忽略，否则它将和输出一同被传送给处理器Processor(Message, string -> string)。
            </summary>
            <param name="msg">待判断消息</param>
            <returns>过滤器输出的字符串</returns>
        </member>
        <member name="M:klbotlib.Modules.Module.Processor(klbotlib.Message,System.String)">
            <summary>
            处理器(Message -> string)。模块通过这个函数处理所有(通过了过滤器的)消息。
            </summary>
            <param name="msg">待处理消息</param>
            <param name="filter_out">过滤器的输出。可以用于从过滤器中获取额外信息（例如消息的分类结果）</param>
            <returns>用字符串表示的处理结果。如果你的模块不打算输出/回复处理结果，应返回null或空字符串</returns>
        </member>
        <member name="P:klbotlib.Modules.Module.HostBot">
            <summary>
            模块所附加到的宿主KLBot
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.DiagData">
            <summary>
            模块统计和诊断信息
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.ModuleCacheDir">
            <summary>
            获取此模块的缓存目录。仅当模块已附加到宿主KLBot上时有效，否则会抛出异常。
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.Cache">
            <summary>
            缓存操作接口
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.Messaging">
            <summary>
            发送消息操作接口
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.ModuleAccess">
            <summary>
            发送消息操作接口
            </summary>
        </member>
        <member name="P:klbotlib.Modules.Module.Enabled">
            <summary>
            模块的总开关. 默认开启. 此开关关闭时任何消息都会被忽略.
            </summary>
        </member>
        <member name="M:klbotlib.Modules.Module.#ctor">
            <summary>
            构造一个模块实例。这个实例不会附加到任何宿主KLBot中
            </summary>
        </member>
        <member name="M:klbotlib.Modules.Module.ModulePrint(System.String,Gleee.Consoleee.ConsoleMessageType,System.String)">
            <summary>
            模块打印消息到控制台的标准方法
            </summary>
            <param name="message">模块要打印消息的内容</param>
            <param name="msg_type">消息类型。提示=Info；警告=Warning；错误=Error；任务执行中=Task；</param>
            <param name="prefix">要在消息类型标识前附上的内容</param>
        </member>
        <member name="M:klbotlib.Modules.Module.TrySetFieldAndProperty``1(System.String,``0)">
            <summary>
            尝试设置模块特定字段的值。只允许设置public字段
            </summary>
            <typeparam name="T">字段类型</typeparam>
            <param name="name">字段名称</param>
            <param name="value">设置字段值</param>
            <returns>设置字段是否成功</returns>
        </member>
        <member name="M:klbotlib.Modules.Module.GetModuleCacheDirAbsolutePath">
            <summary>
            返回当前模块的缓存目录绝对路径
            </summary>
        </member>
        <member name="M:klbotlib.Modules.Module.RestoreType(System.Type,System.Object)">
            <summary>
            NewtonSoft.JsonConvert会把一切整数变成int64，一切浮点数变成double
            丫这么整虽然源码赋值没事(会自动转换)，但反射赋值时会出问题，所以需要手动恢复原本的类型
            v0.5更新：加入自动用泛型反序列化进一步处理其他未知类型的功能
            </summary>
            <param name="original_type">原始类型</param>
            <param name="value">待处理对象</param>
            <returns>转换为原始类型后的对象（如果无需转换则原样返回）</returns>
        </member>
        <member name="M:klbotlib.Modules.Module.ExportMemberWithAttribute(System.Type)">
            <summary>
            把模块中的所有含有attribute_type标记的成员导出到字典
            </summary>
        </member>
        <member name="M:klbotlib.Modules.Module.ToString">
            <summary>
            ToString()函数：未附加时返回模块名；已附加时返回模块ID
            </summary>
        </member>
        <member name="T:klbotlib.Modules.SingleTypeModule`1">
            <summary>
            方便实现只处理单个种类的Message的模块的基类
            如果你的模块只处理单种消息（例如只处理文本消息），继承这玩意可以少写很多类型匹配的废话
            </summary>
            <typeparam name="T">模块所处理的特定消息类型</typeparam>
        </member>
        <member name="M:klbotlib.Modules.SingleTypeModule`1.Filter(`0)">
            <summary>
            单类型过滤器(Message -> bool). 模块通过这个函数判断是否要处理某一条消息. 不符合类型参数的消息会被直接过滤
            </summary>
            <param name="msg">待判断消息</param>
        </member>
        <member name="M:klbotlib.Modules.SingleTypeModule`1.Processor(`0,System.String)">
            <summary>
            处理器(Message -> string). 模块通过这个函数处理所有(通过了过滤器的)消息. 
            </summary>
            <param name="msg">待处理消息</param>
            <param name="filter_out">消息经过过滤器时的输出</param>
            <returns>用字符串表示的处理结果</returns>
        </member>
        <member name="M:klbotlib.Modules.SingleTypeModule`1.Filter(klbotlib.Message)">
            <Inheritdoc/>
        </member>
        <member name="M:klbotlib.Modules.SingleTypeModule`1.Processor(klbotlib.Message,System.String)">
            <Inheritdoc/>
        </member>
        <member name="T:klbotlib.Modules.CommandModuleNamespace.Commands.SimpleActionCommand">
            <summary>
            执行型通用任务的命令基类-无参数
            </summary>
        </member>
        <member name="T:klbotlib.Modules.CommandModuleNamespace.Commands.ActionCommand`1">
            <summary>
            执行通用任务的命令基类-有参数
            </summary>
            <typeparam name="T">参数的类型</typeparam>
        </member>
        <member name="T:klbotlib.Modules.CommandModuleNamespace.Commands.InfoCommand">
            <summary>
            返回信息的命令 的基类
            </summary>
        </member>
        <member name="T:klbotlib.Modules.CommandModuleNamespace.Commands.SwitchCommand">
            <summary>
            开关型命令的基类. 统一调用方法：^[命令字符串]$
            </summary>
        </member>
        <member name="T:klbotlib.Modules.CommandModuleNamespace.Commands.ExternalSwitchCommand">
            <summary>
            专门管理外部模块的开关型命令基类
            </summary>
        </member>
        <member name="T:klbotlib.Modules.CommandModuleNamespace.Commands.AssignmentCommand`1">
            <summary>
            赋值型命令的基类. 统一调用方法：^[命令字符串] 参数$
            </summary>
            <typeparam name="T">参数的类型</typeparam>
        </member>
        <member name="T:klbotlib.Modules.CommandModuleNamespace.Commands.IntExternalAssignmentCommand">
            <summary>
            专门管理外部模块的赋值型命令基类
            </summary>
        </member>
        <member name="T:klbotlib.Modules.CommandModuleNamespace.Commands.ExternalAssignmentCommand`1">
            <summary>
            专门管理外部模块的赋值型命令基类
            </summary>
            <typeparam name="T">参数的类型</typeparam>
        </member>
        <member name="M:klbotlib.Modules.CommandModuleNamespace.Command.IsCmd(System.String)">
            <summary>
            判断特定字符串是否在调用此命令
            </summary>
            <param name="cmd">待判断字符串</param>
            <returns></returns>
        </member>
        <member name="P:klbotlib.Modules.CommandModuleNamespace.Command.Format">
            <summary>
            命令的使用格式, 类似'pti [time]'
            </summary>
        </member>
        <member name="P:klbotlib.Modules.CommandModuleNamespace.Command.Usage">
            <summary>
            命令的作用
            </summary>
        </member>
        <member name="M:klbotlib.Modules.CommandModuleNamespace.Command.CommandTask(klbotlib.KLBot,klbotlib.MessagePlain,System.String)">
            <summary>
            执行命令的操作
            </summary>
            <param name="bot">需要执行的机器人</param>
            <param name="cmd_msg">命令的原始文本消息对象</param>
            <param name="cmd_str">命令的文本(不含前缀)</param>
            <returns></returns>
        </member>
        <member name="T:klbotlib.Modules.CommandModuleNamespace.Command`1">
            <summary>
            Command类型的泛型版本. 用于命令的使能对象不是/不限于KLBot的情况(因为没用用到，这个类暂时处于零维护零测试状态)
            </summary>
            <typeparam name="T">执行指令的对象类型</typeparam>
        </member>
        <member name="T:klbotlib.Modules.ModuleUtils.HttpHelper">
            <summary>
            为模块准备的Http帮助类
            </summary>
        </member>
        <member name="P:klbotlib.Modules.ModuleUtils.HttpHelper.UA">
            <summary>
            进行所有请求时使用的UA标识
            </summary>
        </member>
        <member name="P:klbotlib.Modules.ModuleUtils.HttpHelper.ContentType">
            <summary>
            进行所有请求时使用的ContentType
            </summary>
        </member>
        <member name="P:klbotlib.Modules.ModuleUtils.HttpHelper.Encoding">
            <summary>
            进行所有请求时使用的编码
            </summary>
        </member>
        <member name="P:klbotlib.Modules.ModuleUtils.HttpHelper.Headers">
            <summary>
            其他自定义Header
            </summary>
        </member>
        <member name="M:klbotlib.Modules.ModuleUtils.HttpHelper.PostString(System.String,System.String)">
            <summary>
            向指定地址POST一条字符串
            </summary>
            <param name="url">地址</param>
            <param name="body">内容</param>
        </member>
        <member name="M:klbotlib.Modules.ModuleUtils.HttpHelper.PostStringAsync(System.String,System.String)">
            <summary>
            向指定地址POST一条字符串 (异步版)
            </summary>
            <param name="url">地址</param>
            <param name="body">内容</param>
            <returns></returns>
        </member>
        <member name="T:klbotlib.Modules.ModuleUtils.ImageHelper">
            <summary>
            为模块开发准备的图像帮助类
            </summary>
        </member>
        <member name="M:klbotlib.Modules.ModuleUtils.ImageHelper.DownloadImage(System.String,System.Int32@,System.String)">
            <summary>
            下载一张图片，并解析为Bitmap对象。默认使用伪装的Firefox UserAgent
            </summary>
            <param name="url">图片地址</param>
            <param name="size">输出图片的字节数</param>
            <param name="ua">下载时使用的UserAgent</param>
        </member>
        <member name="M:klbotlib.Modules.ModuleUtils.ImageHelper.DownloadAsBase64(System.String)">
            <summary>
            下载图片为Base64字符串
            </summary>
            <param name="url">图像地址</param>
        </member>
        <member name="M:klbotlib.Modules.ModuleUtils.ImageHelper.Resize(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            缩放一张图片到指定分辨率
            </summary>
            <param name="bmp">待缩放图像</param>
            <param name="width">目标宽度</param>
            <param name="height">目标高度px</param>
        </member>
        <member name="M:klbotlib.Modules.ModuleUtils.ImageHelper.ResizeToLimit(System.Drawing.Bitmap,System.Int32)">
            <summary>
            缩放一张图片，使其最大可能大小不超过某个值
            </summary>
            <param name="bmp">待缩放图片</param>
            <param name="size_limit">大小限制（字节）</param>
        </member>
        <member name="T:klbotlib.Exceptions.KLBotInitializationException">
            <summary>
            KLBot初始化失败异常
            </summary>
        </member>
        <member name="T:klbotlib.Exceptions.ModuleSetupException">
            <summary>
            模块配置异常
            </summary>
        </member>
        <member name="T:klbotlib.Exceptions.ModuleMissingException">
            <summary>
            找不到模块异常
            </summary>
        </member>
        <member name="M:klbotlib.Exceptions.ModuleMissingException.#ctor(System.String)">
            <summary>
            新建一个找不到模块异常的实例
            </summary>
            <param name="msg">异常信息</param>
        </member>
        <member name="T:klbotlib.Extensions.VersionExtension">
            <summary>
            Version扩展
            </summary>
        </member>
        <member name="M:klbotlib.Extensions.VersionExtension.ToKLGBuildString(System.Version)">
            <summary>
            从版本号计算KLG标准的Build编号
            </summary>
            <param name="version">版本号</param>
            <returns>KLG标准的Build编号</returns>
        </member>
        <member name="M:klbotlib.Extensions.DictionaryExtension.Serialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字符串字典序列化为二进制
            </summary>
            <param name="dict">待序列化字典</param>
        </member>
        <member name="M:klbotlib.Extensions.DictionaryExtension.Deserialize(System.Byte[])">
            <summary>
            将二进制反序列化为字典
            </summary>
            <param name="bin">待反序列化字节数组</param>
        </member>
        <member name="M:klbotlib.Extensions.UnitStringExtension.ToMemorySizeString(System.Int64,System.Int32)">
            <summary>
            将字节数自动转换为合适数据单位的字符串
            </summary>
            <param name="byte_count">字节数量</param>
            <param name="decimals">小数位数</param>
        </member>
        <member name="M:klbotlib.Extensions.UnitStringExtension.ToMemorySizeString(System.Int32,System.Int32)">
            <summary>
            将字节数自动转换为合适数据单位的字符串
            </summary>
            <param name="byte_count">字节数量</param>
            <param name="decimals">小数位数</param>
        </member>
        <member name="M:klbotlib.Extensions.UnitStringExtension.ToTimeSpanString(System.Int64,System.Int32)">
            <summary>
            将毫秒数自动转换为合适时间单位的字符串
            </summary>
            <param name="ms">毫秒数</param>
            <param name="decimals">小数位数</param>
        </member>
        <member name="M:klbotlib.Extensions.UnitStringExtension.ToTimeSpanString(System.Double,System.Int32)">
            <summary>
            将毫秒数自动转换为合适时间单位的字符串
            </summary>
            <param name="ms">毫秒数</param>
            <param name="decimals">小数位数</param>
        </member>
        <member name="M:klbotlib.Extensions.TypeExtension.GetRootBaseType(System.Type)">
            <summary>
            获取除object以外最基本的基类
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:klbotlib.Extensions.TypeExtension.GetProperty_All(System.Type,System.String)">
            <summary>
            获取所有属性字段
            </summary>
            <param name="type">类型</param>
            <param name="name">属性字段名称</param>
        </member>
        <member name="M:klbotlib.Extensions.StringExtension.Shorten(System.String,System.Int32)">
            <summary>
            将超过指定长度限制的字符串的中间部分省略
            </summary>
            <param name="max_length">长度上限</param>
        </member>
        <member name="T:klbotlib.IFileAPI">
            <summary>
            文件操作API
            </summary>
        </member>
        <member name="M:klbotlib.IFileAPI.FileExist(System.String)">
            <summary>
            返回模块缓存目录中是否存在某个文件
            </summary>
            <param name="relative_path">对模块缓存目录的相对路径</param>
        </member>
        <member name="M:klbotlib.IFileAPI.SaveFileAsString(System.String,System.String)">
            <summary>
            保存文本到模块缓存目录
            </summary>
            <param name="relative_path">对模块缓存目录的相对路径</param>
            <param name="text">保存的内容</param>
        </member>
        <member name="M:klbotlib.IFileAPI.SaveFileAsBinary(System.String,System.Byte[])">
            <summary>
            保存二进制到模块缓存目录
            </summary>
            <param name="relative_path">对模块缓存目录的相对路径</param>
            <param name="bin">保存的内容</param>
        </member>
        <member name="M:klbotlib.IFileAPI.ReadFileAsString(System.String)">
            <summary>
            从模块缓存目录里读取文本
            </summary>
            <param name="relative_path">要读取的文件对模块缓存目录的相对路径</param>
        </member>
        <member name="M:klbotlib.IFileAPI.ReadFileAsBinary(System.String)">
            <summary>
            从模块缓存目录里读取二进制
            </summary>
            <param name="relative_path">要读取的文件对模块缓存目录的相对路径</param>
        </member>
        <member name="M:klbotlib.IFileAPI.DeleteFile(System.String)">
            <summary>
            从模块缓存目录里删除文件
            </summary>
            <param name="relative_path">要删除的文件对模块缓存目录的相对路径</param>
        </member>
        <member name="T:klbotlib.IMessagingAPI">
            <summary>
            发送消息API
            </summary>
        </member>
        <member name="M:klbotlib.IMessagingAPI.SendMessage(klbotlib.MessageContext,System.Int64,System.Int64,System.String)">
            <summary>
            发送消息接口
            </summary>
            <param name="context">发送的消息上下文类型</param>
            <param name="user_id">用户ID</param>
            <param name="group_id">群组ID</param>
            <param name="content">MsgMarker文本</param>
        </member>
        <member name="M:klbotlib.IMessagingAPI.ReplyMessage(klbotlib.Message,System.String)">
            <summary>
            回复消息接口
            </summary>
            <param name="origin_msg">待回复的原始消息</param>
            <param name="content">回复内容</param>
        </member>
        <member name="M:klbotlib.IMessagingAPI.SendGroupMessage(System.Int64,System.String)">
            <summary>
            发送群消息接口
            </summary>
            <param name="group_id">目标群组ID</param>
            <param name="content">MsgMarker文本</param>
        </member>
        <member name="M:klbotlib.IMessagingAPI.SendTempMessage(System.Int64,System.Int64,System.String)">
            <summary>
            发送临时消息接口
            </summary>
            <param name="user_id">目标用户ID</param>
            <param name="group_id">通过的群组的ID</param>
            <param name="content">MsgMarker文本</param>
        </member>
        <member name="M:klbotlib.IMessagingAPI.SendPrivateMessage(System.Int64,System.String)">
            <summary>
            发送私聊消息接口
            </summary>
            <param name="user_id">目标用户ID</param>
            <param name="content">MsgMarker文本</param>
        </member>
        <member name="T:klbotlib.IModuleAccessAPI">
            <summary>
            模块访问API
            </summary>
        </member>
        <member name="M:klbotlib.IModuleAccessAPI.GetModule``1(System.Int32)">
            <summary>
            获取宿主KLBot上其他模块的标准方法。根据模块类型和索引，从宿主KLBot处获取模块实例
            </summary>
            <typeparam name="T">目标模块的类型</typeparam>
            <param name="index">目标模块在同类型模块中的索引。默认为0</param>
            <returns>获取到的模块实例</returns>
        </member>
        <member name="M:klbotlib.IModuleAccessAPI.TryGetFieldAndProperty``1(System.String,``0@)">
            <summary>
            尝试获取模块特定字段的值。只允许获取public字段
            </summary>
            <typeparam name="T">字段类型</typeparam>
            <param name="name">字段名称</param>
            <param name="value">输出字段的值</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="T:klbotlib.Internal.JMessage">
            <summary>
            直接从JSON解析的消息对象
            </summary>
        </member>
        <member name="T:klbotlib.Internal.JMessagePackage">
            <summary>
            直接从JSON解析出的消息包对象
            </summary>
        </member>
        <member name="T:klbotlib.JKLBotConfig">
            <summary>
            KLBot启动配置类
            </summary>
        </member>
        <member name="M:klbotlib.JKLBotConfig.#ctor(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.String)">
            <summary>
            创建一个KLBot配置
            </summary>
            <param name="url">mirai服务器所在URL</param>
            <param name="self_id">KLBot自身ID (QQ号)</param>
            <param name="targets">监听群组列表</param>
            <param name="modules_cache_dir">模块缓存目录（相对）。所有模块的缓存目录集中在该目录下</param>
            <param name="modules_save_dir">模块状态和模块配置的存档目录（相对）。所有模块的状态存档和配置存档文件集中在该目录下</param>
        </member>
        <member name="T:klbotlib.KLBot">
            <summary>
            KLBot类。机器人本体
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.ModuleChain">
            <summary>
            KLBot的模块链条。这个类可以被枚举
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.ModuleCount">
            <summary>
            当前模块总数，即模块链条的长度
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.DiagData">
            <summary>
            此KLBot的统计和诊断信息
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.PollingTimeInterval">
            <summary>
            此KLBot的轮询时间间隔（ms）。默认为250ms。过高的值会造成KLBot反应迟钝；过低的值可能会给mirai服务器造成压力。
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.IsLoopOn">
            <summary>
            此KLBot的消息循环Flag。设为false时会停止消息循环。
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.SelfID">
            <summary>
            配置项：此KLBot自身的QQ号
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.TargetGroupIDList">
            <summary>
            配置项：此KLBot的监听群组QQ号列表
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.ModulesCacheDir">
            <summary>
            配置项：模块私有目录。用来存取模块自己的自定义文件
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.ModulesSaveDir">
            <summary>
            配置项：模块存档目录。KLBot保存或读取模块配置和模块状态的路径
            </summary>
        </member>
        <member name="P:klbotlib.KLBot.ServerURL">
            <summary>
            配置项：模块存档目录。KLBot保存或读取模块配置和模块状态的路径
            </summary>
        </member>
        <member name="M:klbotlib.KLBot.#ctor(System.String)">
            <summary>
            私有构造函数。最基本的构造函数
            </summary>
            <param name="config_path">配置文件路径"</param>
        </member>
        <member name="M:klbotlib.KLBot.#ctor(System.String,System.Boolean)">
            <summary>
            公开构造函数。基本构造后添加默认核心模块
            </summary>
            <param name="config_path">配置文件路径</param>
            <param name="load_core_module">是否加载核心模块</param>
        </member>
        <member name="M:klbotlib.KLBot.AddTarget(System.Int64[])">
            <summary>
            把给定群号添加到监听列表
            </summary>
            <param name="target">需要添加的群号</param>
        </member>
        <member name="M:klbotlib.KLBot.AddTarget(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            把一组群号批量添加到监听列表
            </summary>
            <param name="targets">需要添加的群号集合</param>
        </member>
        <member name="M:klbotlib.KLBot.ListModules">
            <summary>
            在控制台列出并打印模块链条
            </summary>
        </member>
        <member name="M:klbotlib.KLBot.GetModule``1(System.Int32)">
            <summary>
            根据模块类型获取模块
            </summary>
            <typeparam name="T">目标模块类型</typeparam>
            <param name="index">目标模块的索引</param>
            <returns>目标模块实例</returns>
        </member>
        <member name="P:klbotlib.KLBot.Item(System.String)">
            <summary>
            已知模块ID，获取模块
            </summary>
            <param name="module_id">模块ID</param>
        </member>
        <member name="M:klbotlib.KLBot.AddModule(klbotlib.Modules.Module[])">
            <summary>
            在当前模块链条的末尾手动添加一个或多个新模块
            </summary>
        </member>
        <member name="M:klbotlib.KLBot.SendMessage(klbotlib.Modules.Module,klbotlib.MessageContext,System.Int64,System.Int64,System.String)">
            <summary>
            发送消息接口
            </summary>
            <param name="module">编译MsgMarker时使用的模块</param>
            <param name="context">发送的消息上下文类型</param>
            <param name="user_id">用户ID</param>
            <param name="group_id">群组ID</param>
            <param name="content">待编译MsgMarker文本</param>
        </member>
        <member name="M:klbotlib.KLBot.ReplyMessage(klbotlib.Modules.Module,klbotlib.Message,System.String)">
            <summary>
            回复消息接口
            </summary>
            <param name="module">调用模块</param>
            <param name="origin_msg">待回复的原始消息</param>
            <param name="content">回复内容</param>
        </member>
        <member name="M:klbotlib.KLBot.SendGroupMessage(klbotlib.Modules.Module,System.Int64,System.String)">
            <summary>
            发送群消息接口
            </summary>
            <param name="module">编译MsgMarker时使用的模块</param>
            <param name="group_id">目标群组ID</param>
            <param name="content">MsgMarker文本</param>
        </member>
        <member name="M:klbotlib.KLBot.SendGroupMessage(klbotlib.Modules.Module,System.Int64,System.Int64,System.String)">
            <summary>
            发送临时消息接口
            </summary>
            <param name="module">编译MsgMarker时使用的模块</param>
            <param name="user_id">目标用户ID</param>
            <param name="group_id">通过的群组的ID</param>
            <param name="content">MsgMarker文本</param>
        </member>
        <member name="M:klbotlib.KLBot.SendPrivateMessage(klbotlib.Modules.Module,System.Int64,System.String)">
            <summary>
            发送私聊消息接口
            </summary>
            <param name="module">编译MsgMarker时使用的模块</param>
            <param name="user_id">目标用户ID</param>
            <param name="content">MsgMarker文本</param>
        </member>
        <member name="M:klbotlib.KLBot.ObjectPrint(System.Object,System.String,Gleee.Consoleee.ConsoleMessageType,System.String)">
            <summary>
            向控制台打印字符串。打印内容会自动包含消息源头的对象的名称
            </summary>
            <param name="source">消息来源的对象</param>
            <param name="message">需要向控制台打印的消息</param>
            <param name="msg_type">消息类别 分为无、信息、警告、错误、任务. 默认为信息. </param>
            <param name="prefix">要在消息类别标识前附加的内容</param>
        </member>
        <member name="M:klbotlib.KLBot.TrySendMessage(klbotlib.MessageContext,System.String)">
            <summary>
            发送给定消息.
            </summary>
            <param name="context">指定发送的上下文</param>
            <param name="full_msg_json">回复消息json</param>
        </member>
        <member name="M:klbotlib.KLBot.FetchMessages">
            <summary>
            从服务器获取新消息并进行初步过滤
            </summary>
        </member>
        <member name="M:klbotlib.KLBot.ProcessMessages(System.Collections.Generic.List{klbotlib.Message})">
            <summary>
            用默认消息处理函数依次处理消息列表
            </summary>
            <param name="msgs">待处理消息列表</param>
            <returns>已处理的消息数量</returns>
        </member>
        <member name="M:klbotlib.KLBot.ProcessMessages(System.Collections.Generic.List{klbotlib.Message},System.Action{klbotlib.Message})">
            <summary>
            用processor依次处理消息列表。返回非空消息的个数
            </summary>
            <param name="msgs">待处理消息列表</param>
            <param name="main_processor">消息处理函数</param>
            <returns>已处理的消息数量</returns>
        </member>
        <member name="M:klbotlib.KLBot.MainLoop">
            <summary>
            总循环。包括消息循环和命令循环
            </summary>
        </member>
        <member name="M:klbotlib.KLBot.ReloadAllModules">
            <summary>
            重新载入所有模块配置和状态
            </summary>
        </member>
        <member name="M:klbotlib.KLBot.OnExit">
            <summary>
            有序退出函数
            </summary>
        </member>
        <member name="M:klbotlib.KLBot.GetModuleChainString">
            <summary>
            返回字符串，其中列出当前模块链条
            </summary>
        </member>
        <member name="M:klbotlib.KLBot.GetListeningGroupListString">
            <summary>
            返回字符串，其中列出当前监听群组的列表
            </summary>
        </member>
        <member name="M:klbotlib.KLBot.GetModuleStatusString">
            <summary>
            返回字符串，其中列出当前各模块标记了ModuleStatus的属性值。但是ModuleStatus属性中IsHidden=true的字段会被忽略。
            </summary>
        </member>
        <member name="T:klbotlib.KLBotDiagnosticData">
            <summary>
            KLBot诊断数据类
            </summary>
        </member>
        <member name="P:klbotlib.KLBotDiagnosticData.LastUsedModule">
            <summary>
            最近一次处理消息的模块
            </summary>
        </member>
        <member name="P:klbotlib.KLBotDiagnosticData.SuccessPackageCount">
            <summary>
            KLBot初始化后，成功进行查询的总次数
            </summary>
        </member>
        <member name="P:klbotlib.KLBotDiagnosticData.ReceivedMessageCount">
            <summary>
            KLBot初始化后，接收到的消息总数
            </summary>
        </member>
        <member name="P:klbotlib.KLBotDiagnosticData.ProcessedMessageCount">
            <summary>
            KLBot初始化后，所有模块处理消息的总次数。不同模块处理次数会叠加，比如一条消息被两个模块分别处理两次，则计为两次。
            </summary>
        </member>
        <member name="P:klbotlib.KLBotDiagnosticData.LastException">
            <summary>
            最近一次KLBot异常的调用栈
            </summary>
        </member>
        <member name="M:klbotlib.KLBotDiagnosticData.GetSummaryString">
            <summary>
            获取KLBot的统计信息
            </summary>
        </member>
        <member name="T:klbotlib.Message">
            <summary>
            klbot内部使用的消息抽象类。所有QQ消息都继承此类
            </summary>
        </member>
        <member name="P:klbotlib.Message.SenderID">
            <summary>
            发送者的ID（QQ号）。如果没有则为-1
            </summary>
        </member>
        <member name="P:klbotlib.Message.TargetID">
            <summary>
            此消息@的目标的ID列表（QQ号）。如果没有则长度为0。
            </summary>
        </member>
        <member name="P:klbotlib.Message.GroupID">
            <summary>
            此消息来源的群组的ID（群号）。如果消息来源是私聊则为-1；如果消息来源是群组则为群号；如果消息来源是临时会话则为“临时会话所通过的群”的群号。
            </summary>
        </member>
        <member name="P:klbotlib.Message.Context">
            <summary>
            此消息的上下文。私聊=Private；临时会话=Temp；群聊=Group
            </summary>
        </member>
        <member name="M:klbotlib.Message.TargetContains(System.Int64)">
            <summary>
            返回此消息是否@了某个ID
            </summary>
            <param name="id">待判断ID</param>
        </member>
        <member name="T:klbotlib.MessageContext">
            <summary>
            消息上下文枚举，包括私聊、临时、群聊
            </summary>
        </member>
        <member name="F:klbotlib.MessageContext.Private">
            <summary>
            私聊
            </summary>
        </member>
        <member name="F:klbotlib.MessageContext.Temp">
            <summary>
            临时会话
            </summary>
        </member>
        <member name="F:klbotlib.MessageContext.Group">
            <summary>
            群组
            </summary>
        </member>
        <member name="T:klbotlib.MessageImage">
            <summary>
            图像消息类
            </summary>
        </member>
        <member name="P:klbotlib.MessageImage.UrlList">
            <summary>
            图像的Url的列表，顺序从先到后
            </summary>
        </member>
        <member name="T:klbotlib.MessageImagePlain">
            <summary>
            图文消息
            </summary>
        </member>
        <member name="P:klbotlib.MessageImagePlain.UrlList">
            <summary>
            图像的Url
            </summary>
        </member>
        <member name="P:klbotlib.MessageImagePlain.Text">
            <summary>
            随图像一同发送的文字
            </summary>
        </member>
        <member name="T:klbotlib.MessagePlain">
            <summary>
            纯文本消息类
            </summary>
        </member>
        <member name="P:klbotlib.MessagePlain.Text">
            <summary>
            此消息的文本内容
            </summary>
        </member>
        <member name="T:klbotlib.MessageVoice">
            <summary>
            语音消息
            </summary>
        </member>
        <member name="P:klbotlib.MessageVoice.Url">
            <summary>
            语音的url
            </summary>
        </member>
        <member name="M:klbotlib.ModuleChain.AddModule(klbotlib.Modules.Module[])">
            <summary>
            向模块链条中添加模块
            </summary>
            <param name="modules"></param>
        </member>
        <member name="M:klbotlib.ModuleChain.ContainsModule(System.String)">
            <summary>
            返回模块链条中是否含有某个ID的模块
            </summary>
            <param name="module_id">模块ID</param>
        </member>
        <member name="P:klbotlib.ModuleChain.Count">
            <summary>
            模块链条中模块的数量
            </summary>
        </member>
        <member name="P:klbotlib.ModuleChain.Item(System.String)">
            <summary>
            获取模块实例
            </summary>
            <param name="module_id">模块ID</param>
        </member>
        <member name="M:klbotlib.ModuleChain.TryGetModule(System.String,klbotlib.Modules.Module@)">
            <summary>
            获取模块实例。当你不关心目标模块的类型时，使用此方法。等价于直接使用ModuleChain[module_id]。
            成功时会返回true，失败时会返回false。
            </summary>
            <param name="module_id">模块ID</param>
        </member>
        <member name="M:klbotlib.ModuleChain.TryGetModule``1(System.Int32,``0@)">
            <summary>
            获取模块实例。当你需要获取某个类型的特定模块时，使用此方法。
            成功时会返回true，失败时会返回false。
            </summary>
            <typeparam name="T">目标模块的类型</typeparam>
            <param name="module_index">目标模块的索引。默认为0</param>
        </member>
        <member name="M:klbotlib.ModuleChain.GetModule(System.String)">
            <summary>
            获取模块实例。当你不关心目标模块的类型时，使用此方法。等价于直接使用ModuleChain[module_id]。
            </summary>
            <param name="module_id">模块ID</param>
        </member>
        <member name="M:klbotlib.ModuleChain.GetModule``1(System.Int32)">
            <summary>
            获取模块实例。当你需要获取某个类型的特定模块时，使用此方法。
            </summary>
            <typeparam name="T">目标模块的类型</typeparam>
            <param name="module_index">目标模块的索引。默认为0</param>
        </member>
        <member name="M:klbotlib.ModuleChain.ForEach(System.Action{klbotlib.Modules.Module})">
            <inheritdoc/>
        </member>
        <member name="T:klbotlib.ModuleDiagnosticData">
            <summary>
            模块诊断统计信息
            </summary>
        </member>
        <member name="P:klbotlib.ModuleDiagnosticData.LastProcessTime">
            <summary>
            最后一次处理消息消耗的时间
            </summary>
        </member>
        <member name="P:klbotlib.ModuleDiagnosticData.ProcessedMessageCount">
            <summary>
            经过该模块实例处理的消息总数
            </summary>
        </member>
        <member name="P:klbotlib.ModuleDiagnosticData.LastException">
            <summary>
            最近一次异常的调用栈
            </summary>
        </member>
        <member name="M:klbotlib.ModuleDiagnosticData.RestartMeasurement">
            <summary>
            重新开始处理计时
            </summary>
        </member>
        <member name="M:klbotlib.ModuleDiagnosticData.StopMeasurement">
            <summary>
            结束计时并记录处理时间
            </summary>
        </member>
        <member name="M:klbotlib.ModuleDiagnosticData.GetSummaryString">
            <summary>
            获取此模块的统计信息
            </summary>
        </member>
    </members>
</doc>
